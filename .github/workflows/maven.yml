

name: project cicd flow


on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Choose deployment type'
        required: true
        default: 'container'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
     
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
  
    # - name: Choose Deployment Type
    #   id: choose_deployment
    #   run: |
    #        deployment_type=$(echo -e 'container\nnon-container' | grep -m 1 -i "$(echo "$INPUT_DEPLOYMENT_TYPE" | tr -d '[:space:]')")
    #        echo "Deployment Type: $deployment_type"
    #        echo "::set-output name=deployment_type::$deployment_type"
    #   env:
    #      INPUT_DEPLOYMENT_TYPE: ${{ github.event.inputs.deployment_type }}
    - name: Choose Deployment Type
      id: choose_deployment
      run: |
        deployment_type=$(echo -e 'container\nnon-container' | grep -m 1 -i "$(echo "$INPUT_DEPLOYMENT_TYPE" | tr -d '[:space:]')")
        echo "Deployment Type: $deployment_type"
        echo "DEPLOYMENT_TYPE=$deployment_type" >> $GITHUB_ENV
      env:
       INPUT_DEPLOYMENT_TYPE: ${{ github.event.inputs.deployment_type }}


    - name: Show Deployment Type
      run: |
        echo "Deployment Type: $DEPLOYMENT_TYPE"

    
    - name: Unit Testing
      run: mvn test

    # - name: Cache SonarQube packages
    #   uses: actions/cache@v1
    #   with:
    #     path: ~/.sonar/cache
    #     key: ${{ runner.os }}-sonar
    #     restore-keys: ${{ runner.os }}-sonar
    # - name: Cache Maven packages
    #   uses: actions/cache@v1
    #   with:
    #     path: ~/.m2
    #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    #     restore-keys: ${{ runner.os }}-m2
    # - name: Build and analyze
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      
    - name: Build with Maven
      run: mvn clean install
    - name: Nexus Repo Publish
      uses: sonatype-nexus-community/nexus-repo-github-action@master
      with:
        serverUrl: http://65.2.122.38:8081
        username: admin
        password: admin
        format: maven2
        repository: devops-maven
        coordinates: groupId=QA artifactId=devops-integration version=${{ github.run_number }}
        assets: extension=war
        filename: ./target/devops-integration.war
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Check Docker Version
      run: docker --version

    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      env:
        JAVA_HOME: /opt/jdk
      id: Depcheck
      with:
        project: 'Maven_War_Project_Githubaction'
        path: '.'
        format: 'HTML'
        out: 'reports' # this is the default, no need to specify unless you wish to override it
        args: >
          --failOnCVSS 10
          --enableRetired
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
         name: Depcheck report
         path: ${{github.workspace}}/reports

    
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: ramansingh2000/devops-integration
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Trivy Scan
      uses:  aquasecurity/trivy-action@master
      with:
        image-ref: ramansingh2000/devops-integration:latest
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
 

 
  deploy:
    needs: build
    runs-on: self-hosted
    steps: 
      - name: Debug Outputs Structure
        run: |
          echo "Build Outputs: ${{ toJson(needs.build.outputs) }}"
      - name: Retrieve Deployment Type from previous job
        run: |
          deployment_type=$DEPLOYMENT_TYPE
          echo "Deployment Type in Deploy Job: $deployment_type"
          echo "Deployment Type from inputs: ${{ github.event.inputs.deployment_type }}"

      - name: Deployment based on Type
        run: |
         if [[ "$deployment_type" == "container" ]]; then
          # Container deployment steps
          sudo docker pull ramansingh2000/devops-integration:latest
          sudo docker rm -f springboot-example-container
          sudo docker run -d -p 8087:8080 --name springboot-example-container ramansingh2000/devops-integration:latest
         else
         
          sudo yum install wget -y
          # echo "NEXUS_USERNAME=your_username" >> ~/.bashrc
          # echo "NEXUS_PASSWORD=your_password" >> ~/.bashrc
          # source ~/.bashrc

          # Example: Download a WAR file from Nexus
          wget --user=admin --password=admin -O app.war "http://65.2.122.38:8081/repository/maven-devops/QA/devops-integration/${{ github.run_number }}/devops-integration-${{ github.run_number }}.war"

          # Download Tomcat Docker image
          sudo docker pull tomcat:8

          # Run Tomcat Docker container on port 8085
          sudo docker run -d -p 8085:8080 --name my-tomcat tomcat:8

          # Deploy the WAR file to Tomcat
          sudo docker cp app.war my-tomcat:/usr/local/tomcat/webapps/
         fi

 
  
